services:

  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    networks:
      - app-network

  kafka:
    image: wurstmeister/kafka
    container_name: kafka
    healthcheck:
      test: ["CMD-SHELL", "echo test | grep 'test'"]
      interval: 1s
      timeout: 15s
      retries: 10
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9092,OUTSIDE://localhost:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9092,OUTSIDE://0.0.0.0:9093
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      # KAFKA_CREATE_TOPICS: "generation_requests:3:1,status_update_requests:3:1,photo_requests:3:1,audio_requests:3:1,merge_requests:3:1"
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    networks:
      - app-network
  
  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - 8080:8080
    environment:
      DYNAMIC_CONFIG_ENABLED: 'true'
    networks:
        - app-network
    volumes:
      - ./kafka-ui.yml:/etc/kafkaui/dynamic_config.yaml
    depends_on:
      kafka:
        condition: service_healthy

  api-gateway:
    build: ApiGatewayService
    hostname: api-gateway
    networks:
      - app-network
    ports:
      - "8000:8080"
  
  auth-service:
    build: AuthService
    hostname: auth
    networks:
      - app-network
    ports:
      - "8001:8080"
  
  letter-service:
    build: LetterService
    networks:
      - app-network
    hostname: letter
    ports:
      - "8002:8080"
  
  pipeline-service:
    build: PipelineService
    hostname: pipeline
    networks:
      - app-network
    depends_on:
      kafka:
        condition: service_healthy
  
  video-service:
    build: VideoService
    hostname: videoservice
    networks:
      - app-network
  
  postgres:
    image: postgres:latest
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    networks:
      - app-network
    volumes:
      - ./postgres_data:/var/lib/postgresql/data

  minio:
    image: minio/minio
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    ports:
      - "9000:9000"
    command: server /data
    networks:
      - app-network
    volumes:
      - ./minio_data:/data

  redis:
    image: redis:latest
    command: ["redis-server", "--requirepass", "${REDIS_PASSWORD}"]
    ports:
      - "6379:6379"
    networks:
      - app-network
    volumes:
      - ./redis_data:/data

  shadowsocks:
    image: ghcr.io/shadowsocks/sslocal-rust:latest
    volumes:
      - ./shadowsocks.json:/etc/shadowsocks-rust/config.json
    networks:
      - app-network

  prompt-service:
    build: ./PromptService/
    depends_on:
      kafka:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8000/healthcheck"]
      interval: 30s
      timeout: 1s
      retries: 3
    ports:
      - "8111:8000"
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - DEEPSEEK_API_KEY=${DEEPSEEK_API_KEY}
      - YANDEX_SPEECHKIT_API_KEY=${YANDEX_SPEECHKIT_API_KEY}
      - ENV_PROXY=${ENV_PROXY}
      - GEN_MODE=${GEN_MODE}
      - PROMPT_MODERATION=${PROMPT_MODERATION}
      - PROMPT_GENERATION=${PROMPT_GENERATION}
    networks:
      - app-network

  audio-service:
    build: ./AudioService/
    depends_on:
      kafka:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8000/healthcheck"]
      interval: 30s
      timeout: 1s
      retries: 3
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - DEEPSEEK_API_KEY=${DEEPSEEK_API_KEY}
      - YANDEX_SPEECHKIT_API_KEY=${YANDEX_SPEECHKIT_API_KEY}
      - ENV_PROXY=${ENV_PROXY}
      - GEN_MODE=${GEN_MODE}
    networks:
      - app-network

  photo-service:
    build: ./PhotoService/
    depends_on:
      - kafka
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8000/healthcheck"]
      interval: 30s
      timeout: 1s
      retries: 3
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - DEEPSEEK_API_KEY=${DEEPSEEK_API_KEY}
      - YANDEX_SPEECHKIT_API_KEY=${YANDEX_SPEECHKIT_API_KEY}
      - ENV_PROXY=${ENV_PROXY}
      - GEN_MODE=${GEN_MODE}
    networks:
      - app-network

  merge-service:
    build: ./MergeService/
    depends_on:
      - kafka
      - redis
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8000/healthcheck"]
      interval: 30s
      timeout: 1s
      retries: 3
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - DEEPSEEK_API_KEY=${DEEPSEEK_API_KEY}
      - YANDEX_SPEECHKIT_API_KEY=${YANDEX_SPEECHKIT_API_KEY}
      - ENV_PROXY=${ENV_PROXY}
      - GEN_MODE=${GEN_MODE}
    networks:
      - app-network


networks:
  app-network:
    driver: bridge


